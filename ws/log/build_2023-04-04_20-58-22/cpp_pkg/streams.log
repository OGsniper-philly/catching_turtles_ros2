[0.008s] Invoking command in '/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/build/cpp_pkg': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/install/python_pkg:/opt/ros/humble /usr/bin/cmake --build /home/nikolai/Documents/ROS/catching_turtles_ros2/ws/build/cpp_pkg -- -j20 -l20
[0.019s] -- Found ament_cmake: 1.3.3 (/opt/ros/humble/share/ament_cmake/cmake)
[0.107s] -- Found rclcpp: 16.0.3 (/opt/ros/humble/share/rclcpp/cmake)
[0.124s] -- Found rosidl_generator_c: 3.1.4 (/opt/ros/humble/share/rosidl_generator_c/cmake)
[0.125s] -- Found rosidl_adapter: 3.1.4 (/opt/ros/humble/share/rosidl_adapter/cmake)
[0.128s] -- Found rosidl_generator_cpp: 3.1.4 (/opt/ros/humble/share/rosidl_generator_cpp/cmake)
[0.134s] -- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c
[0.142s] -- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp
[0.173s] -- Found rmw_implementation_cmake: 6.1.1 (/opt/ros/humble/share/rmw_implementation_cmake/cmake)
[0.174s] -- Found rmw_fastrtps_cpp: 6.2.2 (/opt/ros/humble/share/rmw_fastrtps_cpp/cmake)
[0.240s] -- Using RMW implementation 'rmw_fastrtps_cpp' as default
[0.325s] -- Found turtlesim: 1.4.2 (/opt/ros/humble/share/turtlesim/cmake)
[0.395s] -- Found geometry_msgs: 4.2.3 (/opt/ros/humble/share/geometry_msgs/cmake)
[0.455s] -- Configuring done
[0.460s] -- Generating done
[0.460s] -- Build files have been written to: /home/nikolai/Documents/ROS/catching_turtles_ros2/ws/build/cpp_pkg
[0.479s] [ 50%] [32mBuilding CXX object CMakeFiles/turtle_control_node.dir/src/turtle_control_node.cpp.o[0m
[1.645s] In file included from [01m[K/usr/include/c++/11/pstl/glue_algorithm_defs.h:13[m[K,
[1.645s]                  from [01m[K/usr/include/c++/11/algorithm:74[m[K,
[1.645s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:18[m[K,
[1.645s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[1.645s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[1.645s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[1.645s]                  from [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/include/cpp_pkg/turtle_control_node.hpp:1[m[K,
[1.645s]                  from [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/src/turtle_control_node.cpp:1[m[K:
[1.645s] /usr/include/c++/11/functional: In instantiation of â€˜[01m[Kstruct std::_Bind_check_arity<void (TurtleControlNode::*)(turtlesim::msg::Pose_<std::allocator<void> >), TurtleControlNode*>[m[Kâ€™:
[1.645s] [01m[K/usr/include/c++/11/functional:768:12:[m[K   required from â€˜[01m[Kstruct std::_Bind_helper<false, void (TurtleControlNode::*)(turtlesim::msg::Pose_<std::allocator<void> >), TurtleControlNode*>[m[Kâ€™
[1.645s] [01m[K/usr/include/c++/11/functional:789:5:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Func, class ... _BoundArgs> typename std::_Bind_helper<std::__is_socketlike<_Func>::value, _Func, _BoundArgs ...>::type std::bind(_Func&&, _BoundArgs&& ...) [with _Func = void (TurtleControlNode::*)(turtlesim::msg::Pose_<std::allocator<void> >); _BoundArgs = {TurtleControlNode*}][m[Kâ€™
[1.645s] [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/src/turtle_control_node.cpp:10:75:[m[K   required from here
[1.645s] [01m[K/usr/include/c++/11/functional:756:21:[m[K [01;31m[Kerror: [m[Kstatic assertion failed: Wrong number of arguments for pointer-to-member
[1.646s]   755 |       static_assert(_Varargs::[01;31m[Kvalue[m[K
[1.646s]       |                               [01;31m[K~~~~~[m[K
[1.646s]   756 | [01;31m[K                    ? sizeof...(_BoundArgs) >= _Arity::value + 1[m[K
[1.646s]       |                     [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[1.646s]   757 | [01;31m[K                    : sizeof...(_BoundArgs) == _Arity::value + 1[m[K,
[1.646s]       |                     [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[1.646s] [01m[K/usr/include/c++/11/functional:756:21:[m[K [01;36m[Knote: [m[Kâ€˜[01m[K(false ? (1 >= (((long unsigned int)std::integral_constant<long unsigned int, 1>::value) + 1)) : (1 == (((long unsigned int)std::integral_constant<long unsigned int, 1>::value) + 1)))[m[Kâ€™ evaluates to false
[1.867s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
[1.867s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
[1.867s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[1.868s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[1.868s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[1.868s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[1.868s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[1.868s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[1.868s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[1.868s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[1.868s]                  from [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/include/cpp_pkg/turtle_control_node.hpp:1[m[K,
[1.868s]                  from [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/src/turtle_control_node.cpp:1[m[K:
[1.868s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; MessageT = turtlesim::msg::Pose_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[1.868s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[1.868s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[1.869s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[1.869s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[1.869s] [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/src/turtle_control_node.cpp:9:65:[m[K   required from here
[1.869s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:27:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kstd::function<void(turtlesim::msg::Pose_<std::allocator<void> >)>::function(std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>&)[m[Kâ€™
[1.869s]   394 |       callback_variant_ = [01;31m[Kstatic_cast<typename scbth::callback_type>(callback)[m[K;
[1.869s]       |                           [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[1.869s] In file included from [01m[K/usr/include/c++/11/future:47[m[K,
[1.869s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:18[m[K,
[1.869s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[1.869s]                  from [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/include/cpp_pkg/turtle_control_node.hpp:1[m[K,
[1.869s]                  from [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/src/turtle_control_node.cpp:1[m[K:
[1.869s] [01m[K/usr/include/c++/11/bits/std_function.h:435:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Functor, class _Constraints> std::function<_Res(_ArgTypes ...)>::function(_Functor&&) [with _Functor = _Functor; _Constraints = _Constraints; _Res = void; _ArgTypes = {turtlesim::msg::Pose_<std::allocator<void> >}][m[Kâ€™
[1.869s]   435 |         [01;36m[Kfunction[m[K(_Functor&& __f)
[1.869s]       |         [01;36m[K^~~~~~~~[m[K
[1.869s] [01m[K/usr/include/c++/11/bits/std_function.h:435:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[1.869s] In file included from [01m[K/usr/include/c++/11/bits/move.h:57[m[K,
[1.869s]                  from [01m[K/usr/include/c++/11/bits/stl_pair.h:59[m[K,
[1.869s]                  from [01m[K/usr/include/c++/11/bits/stl_algobase.h:64[m[K,
[1.870s]                  from [01m[K/usr/include/c++/11/memory:63[m[K,
[1.870s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153[m[K,
[1.870s]                  from [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/include/cpp_pkg/turtle_control_node.hpp:1[m[K,
[1.870s]                  from [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/src/turtle_control_node.cpp:1[m[K:
[1.870s] /usr/include/c++/11/type_traits: In substitution of â€˜[01m[Ktemplate<bool _Cond, class _Tp> using __enable_if_t = typename std::enable_if::type [with bool _Cond = false; _Tp = void][m[Kâ€™:
[1.870s] [01m[K/usr/include/c++/11/bits/std_function.h:353:8:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Res, class ... _ArgTypes> template<class _Cond, class _Tp> using _Requires = std::__enable_if_t<_Cond::value, _Tp> [with _Cond = std::function<void(turtlesim::msg::Pose_<std::allocator<void> >)>::_Callable<std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>&, std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>, std::__invoke_result<std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>&, turtlesim::msg::Pose_<std::allocator<void> > > >; _Tp = void; _Res = void; _ArgTypes = {turtlesim::msg::Pose_<std::allocator<void> >}][m[Kâ€™
[1.870s] [01m[K/usr/include/c++/11/bits/std_function.h:434:9:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; MessageT = turtlesim::msg::Pose_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[1.870s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[1.870s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[1.870s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[1.870s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[1.870s] [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/src/turtle_control_node.cpp:9:65:[m[K   required from here
[1.870s] [01m[K/usr/include/c++/11/type_traits:2211:11:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
[1.870s]  2211 |     using [01;31m[K__enable_if_t[m[K = typename enable_if<_Cond, _Tp>::type;
[1.870s]       |           [01;31m[K^~~~~~~~~~~~~[m[K
[1.870s] In file included from [01m[K/usr/include/c++/11/future:47[m[K,
[1.870s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:18[m[K,
[1.870s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[1.871s]                  from [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/include/cpp_pkg/turtle_control_node.hpp:1[m[K,
[1.871s]                  from [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/src/turtle_control_node.cpp:1[m[K:
[1.871s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; MessageT = turtlesim::msg::Pose_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[1.871s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[1.871s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[1.871s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[1.871s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[1.871s] [01m[K/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/src/cpp_pkg/src/turtle_control_node.cpp:9:65:[m[K   required from here
[1.871s] [01m[K/usr/include/c++/11/bits/std_function.h:404:7:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::function<_Res(_ArgTypes ...)>::function(std::function<_Res(_ArgTypes ...)>&&) [with _Res = void; _ArgTypes = {turtlesim::msg::Pose_<std::allocator<void> >}][m[Kâ€™
[1.871s]   404 |       [01;36m[Kfunction[m[K(function&& __x) noexcept
[1.871s]       |       [01;36m[K^~~~~~~~[m[K
[1.871s] [01m[K/usr/include/c++/11/bits/std_function.h:404:27:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kstd::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>[m[Kâ€™ to â€˜[01m[Kstd::function<void(turtlesim::msg::Pose_<std::allocator<void> >)>&&[m[Kâ€™
[1.871s]   404 |       function([01;36m[Kfunction&& __x[m[K) noexcept
[1.871s]       |                [01;36m[K~~~~~~~~~~~^~~[m[K
[1.871s] [01m[K/usr/include/c++/11/bits/std_function.h:386:7:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::function<_Res(_ArgTypes ...)>::function(const std::function<_Res(_ArgTypes ...)>&) [with _Res = void; _ArgTypes = {turtlesim::msg::Pose_<std::allocator<void> >}][m[Kâ€™
[1.871s]   386 |       [01;36m[Kfunction[m[K(const function& __x)
[1.871s]       |       [01;36m[K^~~~~~~~[m[K
[1.871s] [01m[K/usr/include/c++/11/bits/std_function.h:386:32:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kstd::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>[m[Kâ€™ to â€˜[01m[Kconst std::function<void(turtlesim::msg::Pose_<std::allocator<void> >)>&[m[Kâ€™
[1.872s]   386 |       function([01;36m[Kconst function& __x[m[K)
[1.872s]       |                [01;36m[K~~~~~~~~~~~~~~~~^~~[m[K
[1.872s] [01m[K/usr/include/c++/11/bits/std_function.h:375:7:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::function<_Res(_ArgTypes ...)>::function(std::nullptr_t) [with _Res = void; _ArgTypes = {turtlesim::msg::Pose_<std::allocator<void> >}; std::nullptr_t = std::nullptr_t][m[Kâ€™
[1.872s]   375 |       [01;36m[Kfunction[m[K(nullptr_t) noexcept
[1.872s]       |       [01;36m[K^~~~~~~~[m[K
[1.872s] [01m[K/usr/include/c++/11/bits/std_function.h:375:16:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kstd::_Bind<void (TurtleControlNode::*(TurtleControlNode*))(turtlesim::msg::Pose_<std::allocator<void> >)>[m[Kâ€™ to â€˜[01m[Kstd::nullptr_t[m[Kâ€™
[1.872s]   375 |       function([01;36m[Knullptr_t[m[K) noexcept
[1.872s]       |                [01;36m[K^~~~~~~~~[m[K
[1.872s] [01m[K/usr/include/c++/11/bits/std_function.h:368:7:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::function<_Res(_ArgTypes ...)>::function() [with _Res = void; _ArgTypes = {turtlesim::msg::Pose_<std::allocator<void> >}][m[Kâ€™
[1.872s]   368 |       [01;36m[Kfunction[m[K() noexcept
[1.872s]       |       [01;36m[K^~~~~~~~[m[K
[1.872s] [01m[K/usr/include/c++/11/bits/std_function.h:368:7:[m[K [01;36m[Knote: [m[K  candidate expects 0 arguments, 1 provided
[2.894s] gmake[2]: *** [CMakeFiles/turtle_control_node.dir/build.make:76: CMakeFiles/turtle_control_node.dir/src/turtle_control_node.cpp.o] Error 1
[2.894s] gmake[1]: *** [CMakeFiles/Makefile2:137: CMakeFiles/turtle_control_node.dir/all] Error 2
[2.895s] gmake: *** [Makefile:146: all] Error 2
[2.896s] Invoked command in '/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/build/cpp_pkg' returned '2': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/nikolai/Documents/ROS/catching_turtles_ros2/ws/install/python_pkg:/opt/ros/humble /usr/bin/cmake --build /home/nikolai/Documents/ROS/catching_turtles_ros2/ws/build/cpp_pkg -- -j20 -l20
